"""
Django settings for ubc project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import environ # Import django-environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize django-environ
env = environ.Env(
    # Set casting and default values for your environment variables
    DEBUG=(bool, False), # Default to False for safety if not explicitly set
    SECRET_KEY=(str, 'INSECURE_DEVELOPMENT_KEY_FALLBACK_ONLY'), # Fallback, but should be in .env
    ALLOWED_HOSTS=(list, []), # Default to empty list for safety
    DATABASE_URL=(str, 'sqlite:///db.sqlite3'), # Default for SQLite if DATABASE_URL not provided
    CORS_ALLOW_ALL_ORIGINS=(bool, False), # Default to False for safety
    CORS_ALLOWED_ORIGINS=(list, []), # Default to empty list
    ADMIN_URL=(str, 'admin/'), # Default admin URL
    SIMPLE_JWT_ACCESS_TOKEN_LIFETIME_DAYS=(int, 30),
    SIMPLE_JWT_REFRESH_TOKEN_LIFETIME_DAYS=(int, 365),
    LOG_FILE_PATH=(str, os.path.join(BASE_DIR, 'logs', 'django_debug.log')),
)

# Take environment variables from .env file
# This will load variables from the .env file at the project root
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'accounts',
    'media_management',
    'category',
    'django_filters',
    'social',
    'services',
    'theme',
    'contact',
    'chats',
    'notifications',
    'corsheaders', # Already there, good.
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Keep this high up
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = env('CORS_ALLOW_ALL_ORIGINS')
# Only use CORS_ALLOWED_ORIGINS if CORS_ALLOW_ALL_ORIGINS is False
if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS')
CORS_ALLOW_CREDENTIALS = True # Often needed for JWT authentication

# CSRF_TRUSTED_ORIGINS: Important for cross-origin POST requests, especially from JS frontends
# For development, you often add localhost/127.0.0.1
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    # Add your Flutter Web dev server if it runs on a different port/domain:
    # "http://localhost:5173", # Example for common frontend dev servers
]
# Ensure you uncomment and update this for production with your actual frontend domains

ROOT_URLCONF = 'ubc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # Add this for showing debug info in templates
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ubc.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': env.db(), # Reads from DATABASE_URL env var
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Set TIME_ZONE based on your location in Kozhikode, Kerala, India
TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True # Keep True if you want Django to handle timezone conversions


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [ BASE_DIR / "static" ]
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication', # Keep for browsable API/Admin
    ),
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated', # Default to requiring authentication
    # ),
    'EXCEPTION_HANDLER': 'accounts.exceptions.custom_api_exception_handler',
}

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=env.int('SIMPLE_JWT_ACCESS_TOKEN_LIFETIME_DAYS')),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=env.int('SIMPLE_JWT_REFRESH_TOKEN_LIFETIME_DAYS')),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ROTATE_REFRESH_TOKENS': True, # Recommended
    'BLACKLIST_AFTER_ROTATION': True, # Recommended
    'UPDATE_LAST_LOGIN': True, # Keep track of user's last login
}

AUTH_USER_MODEL = 'accounts.User'

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-signup-cache",
    }
}

# Add logging configuration for better debug and production monitoring
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO', # Log INFO and higher to file
            'class': 'logging.FileHandler',
            'filename': env('LOG_FILE_PATH'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO', # Log DEBUG to console in dev, INFO in prod
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'accounts': { # Example for your 'accounts' app
            'handlers': ['file', 'console'],
            'level': 'INFO' if not DEBUG else 'DEBUG', # More verbose in dev for app logs
            'propagate': False,
        },
        # Add loggers for other apps as needed
    },
}

# JAZZMIN_SETTINGS (Keep these as they are, but paths like site_logo should be relative to STATIC_URL or MEDIA_URL if they are in your static/media folders)
JAZZMIN_SETTINGS = {
    "site_title": "UBC Admin",
    "site_header": "UBC Admin",
    "site_brand": "UBC",
    "site_logo": "accounts/img/logo1.jpg",
    "site_icon": "accounts/img/admin.jpg",
    "welcome_sign": "Welcome to UBC Admin",
    "copyright": "UBC Inc.",
    "search_model": ["accounts.User"],
    "theme": "darkly",
    "navigation_expanded": True,
    "hide_apps": [],
    "hide_models": [],
    "order_with_respect_to": ["accounts", "category", "media_management", "social", "theme", "services", "contact", "chats", "notifications"],
    "icons": {
        "accounts": "fas fa-id-badge",
        "accounts.User": "fas fa-user-circle",
        "accounts.ProfileViewRecord": "fas fa-eye",
        "category": "fas fa-layer-group",
        "category.Category": "fas fa-list-alt",
        "media_management": "fas fa-photo-video",
        "media_management.ImageUpload": "fas fa-upload",
        "social": "fas fa-share-nodes",
        "social.SocialMediaLink": "fab fa-facebook-messenger",
        "social.SocialMediaPlatform": "fas fa-globe",
        "theme": "fas fa-fill-drip",
        "theme.Theme": "fas fa-brush",
        "services": "fas fa-tools",
        "services.Service": "fas fa-briefcase",
        "contact": "fas fa-address-book",
        "contact.ContactMessage": "fas fa-envelope",
        "chats": "fas fa-comments",
        "chats.Message": "fas fa-comment-alt",
        "notifications": "fas fa-bell",
        "notifications.Notification": "fas fa-bell",
    },
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {
        "accounts.User": "horizontal_tabs",
        "category.Category": "collapsible",
    },
    "related_modal_active": True,
    "show_ui_builder": False,
}

# Optional: Custom Admin URL setup
# Make sure your ubc/urls.py also uses this
ADMIN_URL = env('ADMIN_URL')

# Create the logs directory if it doesn't exist
LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(parents=True, exist_ok=True)